Reporting:
  Add a tool that will generate a saltstack topology in markdown, so
  that I can easily see the 'tiers' and all attached services on
  my network.


Backups:
  Design and add backup context to the states.
  service.level should only contain the files/dirs that need to
  be saved.

  At a level above the services, is where the backup software and
  message passing handling should be done.
  Example with obnam:
    service.mumble = /path/to/serverkeys
    backup.tier = service.obnam < /all/paths/from/all/services-in-play
  This is where the salt-pillars and some python scripting may come
  into play. Such as, using the server name (pillar) as the obnam
  client, for shared repos taking advantage of dedup

I noticed that reloading the saltstate killed the fail2ban config
  for iptables, that is generated on fail2ban installs. I can either
  add custom iptables for it, or rethink my iptables-punching
  schema to accomodate.


Salt-state.cfg?
  Rethink the way that iptables works
    I'm thinking about having it write to files, to add permanence. Right
    now all settings need to be looked at on reboot with a state.highstate.
  I'm thinking about using salt to generate a state-script file that
    can be added to rc.local which will handle permanence across reboot.
    This way, I don't have to run a 'highstate' everytime I need to
    reload things like iptables.
  I need to design the "tiers" of things that will go into this.
    iptables being one, what other things might I want to go into a
    boot script that can't be covered by configs?
  The purpose of this is to avoid touching the rc.local with
    anything other than a one-line: saltstate.py. This way, I don't
    have to worry about blowing out manually entered settings from
    anyone that I wasn't aware of.
